{% extends 'base.html.twig' %}

{% block title %}{{ parent() }} - Sesiones{% endblock %}

{% block stylesheets %}

    <!-- Estilos de datatables -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.5.2/css/bootstrap.css">
    <link rel="stylesheet" href="https://cdn.datatables.net/2.0.3/css/dataTables.bootstrap4.css">
    <link href="https://cdn.datatables.net/2.0.3/css/dataTables.bootstrap4.min.css" rel="stylesheet">
    <link href="https://cdn.datatables.net/buttons/3.0.1/css/buttons.bootstrap4.min.css" rel="stylesheet">

    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('styles/sessions.css') }}">
{% endblock %}

{% block body %}
    {{ parent() }}

    <div style="width: 100%;">
        <div class="cabecera">
            <div class="contenidoCabecera">
                <h2 class="titulo">Sesiones disponibles</h2>
                <div style="display: flex; align-items: center; gap: 10px;">
                    <button class="boton" id="nuevaSesion">Sesión</button>
                    <div class="divider"></div>
                    <button class="boton" id="nuevoServicio">Servicio</button>
                    <button class="boton" id="nuevoExtra">Extra</button>
                </div>
            </div>
        </div>
        <div class="container-fluid">
            <div class="row contenedor-dataTable">
                <div class="col-sm-12 col-md-12 col-lg-12 col-xl-12">
                    <div class="table-responsive">
                        <table id="example" class="table table-striped table-bordered">
                            <thead>
                            <tr>
                                <th>Nº</th>
                                <th>Sesión</th>
                                <th>Servicio</th>
                                <th>Extras</th>
                                <th>Fecha</th>
                                <th>Precio</th>
                                <th>Descripción</th>
                                <th>Fotógrafo</th>
                                <th>Cliente</th>
                                <th>Ticket</th>
                                <th>Opciones</th>
                            </tr>
                            </thead>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <!-- Modal Crear Sesion -->
    <div class="modalSesion" id="modalSesion">
        <div class="modalSesion-content">
            <span class="cerrarModal" id="CerrarSessionButton">&times;</span>
            <h1><i class="fa-solid fa-camera"></i>&nbsp;Nueva sesión</h1>
            <div class="contenedorFormularioSesion" id="contenedorFormularioSesion">
                <form method="post" id="formSession">
                    {#  {{ form_errors(formSession) }} #}
                    {{ form_start(formSession) }}
                    <div class="camposSession">
                        <div>
                            <label class="label">Nombre</label>
                            {{ form_widget(formSession.name, {'attr': {'class': 'padding', 'placeholder': 'Nombre'}}) }}
                        </div>
                        <div>
                            <label class="label">Servicio</label>
                            {{ form_widget(formSession.service, {'attr': {'class': 'padding', 'placeholder': 'Servicio'}}) }}
                        </div>
                        <div>
                            <label class="label">Fecha</label>
                            {{ form_widget(formSession.date, {'attr': {'class': 'padding', 'placeholder': 'Fecha'}}) }}
                        </div>
                        <div>
                            <label class="label">Precio</label>
                            {{ form_widget(formSession.priceSession, {'attr': {'class': 'padding', 'placeholder': 'Precio'}}) }}
                        </div>
                        <div>
                            <label class="label">Descripción</label>
                            {{ form_widget(formSession.descriptionSession, {'attr': {'class': 'padding', 'placeholder': 'Descripción'}}) }}
                        </div>
                    </div>
                    <div class="camposSession">
                        <div>
                            <label class="label">Usuarios</label>
                            <div class="desplegable">
                                {{ form_widget(formSession.users, {'attr': {'class': 'padding'}}) }}
                            </div>
                        </div>
                        <div>
                            <label class="label">Extras</label>
                            <div class="desplegable">
                                {{ form_widget(formSession.extras, {'attr': {'class': 'padding'}}) }}
                            </div>
                        </div>
                    </div>
                    <div class="camposParalelosSession">
                        <button id="CerrarSesion" class="closeSession">Atrás</button>
                        <button type="submit" class="submitSession">Crear</button>
                    </div>
                    {{ form_end(formSession) }}
                </form>
            </div>
        </div>
    </div>


    <!-- Modal Crear Extra -->
    <div class="modalExtra" id="modalExtra">
        <div class="modalExtra-content">
            <span class="cerrarModal" id="CerrarExtraButton">&times;</span>
            <h1><i class="fa-solid fa-circle-plus"></i>&nbsp;Nuevo Extra</h1>
            <div class="contenedorFormularioExtra" id="contenedorFormularioExtra">
                <form method="post" id="formExtras">
                    {#  {{ form_errors(formExtras) }} #}
                    {{ form_start(formExtras) }}
                    <div class="camposExtra">
                        <div>
                            <label class="label">Nombre</label>
                            {{ form_widget(formExtras.name, {'attr': {'class': 'padding', 'placeholder': 'Nombre'}}) }}
                        </div>
                        <div>
                            <label class="label">Precio</label>
                            {{ form_widget(formExtras.priceExtra, {'attr': {'class': 'padding', 'placeholder': 'Precio'}}) }}
                        </div>
                    </div>
                    <div class="camposParalelos">
                        <button id="CerrarExtra" class="closeExtras">Atrás</button>
                        <button type="submit" class="submitExtras">Crear</button>
                    </div>
                    {{ form_end(formExtras) }}
                </form>
            </div>
        </div>
    </div>


    <!-- Modal Crear Servicio -->
    <div class="modalServicio" id="modalServicio">
        <div class="modalServicio-content">
            <span class="cerrarModal" id="CerrarServicioButton">&times;</span>
            <h1><i class="fa-solid fa-circle-plus"></i>&nbsp;Nuevo Servicio</h1>
            <div class="contenedorFormularioServicio" id="contenedorFormularioServicio">
                <form method="post" id="formServices">
                    {#  {{ form_errors(formServices) }} #}
                    {{ form_start(formServices) }}
                    <div class="camposServicio">
                        <div>
                            <label class="label">Nombre</label>
                            {{ form_widget(formServices.name, {'attr': {'class': 'padding', 'placeholder': 'Nombre'}}) }}
                        </div>
                        <div>
                            <label class="label">Precio</label>
                            {{ form_widget(formServices.priceService, {'attr': {'class': 'padding', 'placeholder': 'Precio'}}) }}
                        </div>
                    </div>
                    <div class="camposParalelos">
                        <button id="CerrarServicio" class="closeServicio">Atrás</button>
                        <button type="submit" class="submitServicio">Crear</button>
                    </div>
                    {{ form_end(formServices) }}
                </form>
            </div>
        </div>
    </div>


    <!-- Modal Ver Ticket -->
    <div class="modalVerTicket" id="modalVerTicket">
        <div class="modalVerTicket-content">
            <span class="cerrarModal" id="CerrarVerTicketButton">&times;</span>
            <h1><i class="fa-solid fa-file"></i>&nbsp;Ticket</h1>
            <div class="contenedorFormularioVerTicket" id="contenedorFormularioVerTicket">
                <form>
                    <div class="camposTicket">
                        <div>
                            <label class="label">Sesión</label>
                            <input type="text" name="session"/>
                        </div>
                        <div>
                            <label class="label">Fecha</label>
                            <input type="datetime-local" name="date"/>
                        </div>
                        <div>
                            <label class="label">Servicio</label>
                            <!--<input type="text" name="service"/>-->
                            <select name="service" class="padding">
                                <option value=""></option>
                            </select>
                        </div>
                        <div>
                            <label class="label">Precio Total</label>
                            <input type="text" name="precioTotal"/>
                        </div>
                        <div>
                            <label class="label">Descripción</label>
                            <textarea name="descripcion"></textarea>
                        </div>
                    </div>

                    <div class="botonesExtras" id="extrasContainer"></div>
                </form>
                <div class="camposParalelos">
                        <button id="cerrarVerTicket" class="closeVerTicket">Atrás</button>
                        <!--<button id="guardarVerTicket">Guardar</button>-->
                        <button id="descargarVerTicket" class="submitVerTicket">Descargar &nbsp; <i class="fa-solid fa-file-arrow-down"></i></button>
                </div>
            </div>
        </div>
    </div>


    <!-- Modal Editar Sesion -->
    <div class="modalEditarSesion" id="modalEditarSesion">
        <div class="modalEditarSesion-content">
            <span class="cerrarModal" id="CerrarEditarSessionButton">&times;</span>
            <h1><i class="fa-solid fa-camera"></i>&nbsp;Editar sesión</h1>
            <div class="contenedorFormularioEditarSesion" id="contenedorFormularioEditarSesion">
                <form id="formSessionUpdate">
                    <div>
                        <label class="label">Id</label>
                        <input type="text" class="bloquear" name="id" disabled/>
                    </div>
                    <div>
                        <label class="label">Sesión</label>
                        <input type="text" id="sessionUpdate_name" name="sessionUpdate_name" class="padding"/>
                    </div>
                    <div>
                        <label class="label">Servicio</label>
                        <select id="sessionUpdate_service" name="sessionUpdate_service" class="padding">
                            <option value=""></option>
                        </select>
                    </div>
                    <div>
                        <label class="label">Fecha</label>
                        <input type="datetime-local" id="sessionUpdate_date" name="sessionUpdate_date" class="padding"/>
                    </div>
                    <div>
                        <label class="label">Precio</label>
                        <input type="number" id="sessionUpdate_price" name="sessionUpdate_price" class="padding"/>
                    </div>
                    <div>
                        <label class="label">Descripción</label>
                        <input type="text" id="sessionUpdate_description" name="sessionUpdate_description" class="padding"/>
                    </div>
                </form>
                <div id="error-messages" style="width: 100%; color: red; margin-top: 20px;"></div>
                <div class="camposParalelos">
                    <button id="cerrarEditarSesion" class="closeEditarSession">Atrás</button>
                    <button type="submit" id="guardarEditarSesion" class="submitEditarSession">Guardar</button>
                </div>
            </div>
        </div>
    </div>

    {# SEGUNDA FORMA DE GENERAR PDF #}
{#    <div class="container" style="visibility: hidden; position: absolute;">}
{#        <div id="pdfThis">#}
{#            <h2 style="color: red" id="plan-title"></h2>#}
{#            <ul id="plan-details">#}
{#                <li id="retirement-age"></li>#}
{#                <li id="social-security-age"></li>#}
{#                <li id="salary-savings"></li>#}
{#                <li id="monthly-expenses"></li>#}
{#            </ul>#}
{#            <h2 id="income-statement-title"></h2>#}
{#            <table id="table">#}
{#                <thead>#}
{#                <th>Income</th>#}
{#                <th>Expenses</th>#}
{#                </thead>#}
{#                <tbody id="table-body">#}
{#                <!-- dynamically generated table rows -->#}
{#                </tbody>#}
{#            </table>#}
{#            <p>Dinero Total: 50&#8364; &euro;</p>#}
{#        </div>#}
{#    </div>#}

    <script

    {% block javascripts %}
        {{ parent() }}
{#        <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.9.2/html2pdf.bundle.min.js"></script>#}
{#        <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.1.135/jspdf.min.js"></script>#}

        <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>

        <!-- Script para dataTable -->
        <script src="https://code.jquery.com/jquery-3.7.1.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.5.2/js/bootstrap.min.js"></script>
        <script src="https://cdn.datatables.net/2.0.3/js/dataTables.js"></script>
        <script src="https://cdn.datatables.net/2.0.3/js/dataTables.bootstrap4.js"></script>

        <!-- Scripts para añadir botones -->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/pdfmake.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/vfs_fonts.js"></script>
        <script src="https://cdn.datatables.net/2.0.3/js/dataTables.min.js"></script>
        <script src="https://cdn.datatables.net/2.0.3/js/dataTables.bootstrap4.min.js"></script>
        <script src="https://cdn.datatables.net/buttons/3.0.1/js/dataTables.buttons.min.js"></script>
        <script src="https://cdn.datatables.net/buttons/3.0.1/js/buttons.bootstrap4.min.js"></script>
        <script src="https://cdn.datatables.net/buttons/3.0.1/js/buttons.html5.min.js"></script>
        <script src="https://cdn.datatables.net/buttons/3.0.1/js/buttons.print.min.js"></script>

        <script src="https://kit.fontawesome.com/77aa5e27b8.js" crossorigin="anonymous"></script>

        <script src="{{ asset('js/sessions.js') }}"></script>
        <script type="module" src="{{ asset('js/dataTable.js') }}"></script>

        <script>
            new DataTable('#example');
        </script>

        <script>
            document.addEventListener('DOMContentLoaded', function() {
                const formSession = document.getElementById('formSession');

                if (formSession) {
                    formSession.addEventListener('submit', function(event) {
                        event.preventDefault();

                        const name = document.getElementById('session_name');
                        const service = document.getElementById('session_service');
                        const date = document.getElementById('session_date');
                        const price = document.getElementById('session_priceSession');
                        const description = document.getElementById('session_descriptionSession');

                        let isValid = true;
                        let errorMessages = [];

                        // Validación de campos obligatorios
                        [name, service, date, price, description].forEach(field => {
                            if (!field || !field.value.trim()) {
                                isValid = false;
                                errorMessages.push(`El campo ${field ? field.name.replace('session_', '') : 'desconocido'} es obligatorio.`);
                            }
                        });

                        // Validación del precio
                        if (price && price.value.trim()) {
                            const priceValue = parseFloat(price.value.replace(',', '.'));
                            if (isNaN(priceValue) || priceValue <= 0) {
                                isValid = false;
                                errorMessages.push('El precio debe ser un valor numérico.');
                            } else if (!/^\d+(\.\d{1,2})?$/.test(price.value.replace(',', '.'))) {
                                isValid = false;
                                errorMessages.push('El precio debe tener un valor numérico.');
                            }
                        }

                        // Validación de la fecha
                        if (date && date.value.trim()) {
                            const dateValue = new Date(date.value);
                            if (isNaN(dateValue.getTime())) {
                                isValid = false;
                                errorMessages.push('La fecha debe tener un formato válido.');
                            }
                        }

                        if (!isValid) {
                            showErrors(errorMessages);
                        } else {
                            removeErrors();
                            document.getElementById("modalSesion").style.display = "none";
                            Swal.fire({
                                title: "Éxito",
                                text: "Sesión creada correctamente",
                                icon: "success",
                                showConfirmButton: false,
                                timer: 2000
                            }).then(() => {
                                this.submit();
                            });
                        }
                    });
                }

                function showErrors(messages) {
                    removeErrors();
                    const errorContainer = document.createElement('div');
                    errorContainer.id = 'error-container';
                    errorContainer.className = 'error-container';
                    errorContainer.innerHTML = messages.map(msg => `<p class="error-message" style="color: red; margin-top: 20px;">${msg}</p>`).join('');

                    const camposParalelos = formSession.querySelector('.camposParalelosSession');
                    formSession.insertBefore(errorContainer, camposParalelos);
                }

                function removeErrors() {
                    const errorContainer = document.getElementById('error-container');
                    if (errorContainer) {
                        errorContainer.remove();
                    }
                }
            });

            document.addEventListener('DOMContentLoaded', function() {
                const formExtras = document.getElementById('formExtras');
                if (formExtras) {
                    formExtras.addEventListener('submit', function(event) {
                        event.preventDefault();

                        const name = document.getElementById('extras_name');
                        const price = document.getElementById('extras_priceExtra');

                        let isValid = true;
                        let errorMessages = [];

                        // Validación del nombre
                        if (!name.value.trim()) {
                            isValid = false;
                            errorMessages.push('El nombre del extra es obligatorio.');
                        }

                        // Validación del precio
                        if (!price.value.trim()) {
                            isValid = false;
                            errorMessages.push('El precio del extra es obligatorio.');
                        } else {
                            const priceValue = parseFloat(price.value.replace(',', '.'));
                            if (isNaN(priceValue) || priceValue <= 0) {
                                isValid = false;
                                errorMessages.push('El precio debe ser un valor numérico.');
                            } else if (!/^\d+(\.\d{1,2})?$/.test(price.value.replace(',', '.'))) {
                                isValid = false;
                                errorMessages.push('Solo se admite valores numéricos.');
                            }
                        }

                        if (!isValid) {
                            showErrors(errorMessages);
                        } else {
                            removeErrors();
                            document.getElementById("modalExtra").style.display = "none";
                            Swal.fire({
                                title: "Éxito",
                                text: "Extra creado correctamente",
                                icon: "success",
                                showConfirmButton: false,
                                timer: 2000
                            }).then(() => {
                                this.submit();
                            });
                        }
                    });
                }

                function showErrors(messages) {
                    removeErrors();
                    const errorContainer = document.createElement('div');
                    errorContainer.id = 'error-container';
                    errorContainer.className = 'error-container';
                    errorContainer.innerHTML = messages.map(msg => `<p class="error-message" style="color: red; margin-top: 20px;">${msg}</p>`).join('');

                    const camposParalelos = formExtras.querySelector('.camposParalelos');
                    formExtras.insertBefore(errorContainer, camposParalelos);
                }

                function removeErrors() {
                    const errorContainer = document.getElementById('error-container');
                    if (errorContainer) {
                        errorContainer.remove();
                    }
                }
            });

            document.addEventListener('DOMContentLoaded', function() {
                const formServices = document.getElementById('formServices');
                if (formServices) {
                    formServices.addEventListener('submit', function(event) {
                        event.preventDefault();

                        const name = document.getElementById('services_name');
                        const price = document.getElementById('services_priceService');

                        let isValid = true;
                        let errorMessages = [];

                        // Validación del nombre
                        if (!name.value.trim()) {
                            isValid = false;
                            errorMessages.push('El nombre del servicio es obligatorio.');
                        }

                        // Validación del precio
                        if (!price.value.trim()) {
                            isValid = false;
                            errorMessages.push('El precio del servicio es obligatorio.');
                        } else {
                            const priceValue = parseFloat(price.value.replace(',', '.'));
                            if (isNaN(priceValue) || priceValue <= 0) {
                                isValid = false;
                                errorMessages.push('El precio debe ser un número positivo.');
                            } else if (!/^\d+(\.\d{1,2})?$/.test(price.value.replace(',', '.'))) {
                                isValid = false;
                                errorMessages.push('Solo se admite valores numéricos.');
                            }
                        }

                        if (!isValid) {
                            showErrors(errorMessages);
                        } else {
                            removeErrors();
                            document.getElementById("modalServicio").style.display = "none";
                            Swal.fire({
                                title: "Éxito",
                                text: "Servicio creado correctamente",
                                icon: "success",
                                showConfirmButton: false,
                                timer: 2000
                            }).then(() => {
                                this.submit();
                            });
                        }
                    });
                }

                function showErrors(messages) {
                    removeErrors();
                    const errorContainer = document.createElement('div');
                    errorContainer.id = 'error-container';
                    errorContainer.className = 'error-container';
                    errorContainer.innerHTML = messages.map(msg => `<p class="error-message" style="color: red; margin-top: 20px;">${msg}</p>`).join('');

                    const camposParalelos = formServices.querySelector('.camposParalelos');
                    formServices.insertBefore(errorContainer, camposParalelos);
                }

                function removeErrors() {
                    const errorContainer = document.getElementById('error-container');
                    if (errorContainer) {
                        errorContainer.remove();
                    }
                }
            });
        </script>

{#        <script>#}
{#            function generarPDF() {#}
{#                const { jsPDF } = window.jspdf;#}

{#                html2canvas(document.body).then(canvas => {#}
{#                    const imgData = canvas.toDataURL('image/png');#}
{#                    const pdf = new jsPDF('p', 'mm', 'a4');#}
{#                    const imgProps = pdf.getImageProperties(imgData);#}
{#                    const pdfWidth = pdf.internal.pageSize.getWidth();#}
{#                    const pdfHeight = (imgProps.height * pdfWidth) / imgProps.width;#}

{#                    pdf.addImage(imgData, 'PNG', 0, 0, pdfWidth, pdfHeight);#}
{#                    pdf.save('documento.pdf');#}
{#                });#}
{#            }#}
{#        </script>#}

        <script>
            // TERCERA FORMA DE GENERAR PDF (CONVIRTIENDO A IMAGEN)
            // function generarPDF() {
            //     const { jsPDF } = window.jspdf;
            //
            //     const templateHTML = `
            //         <h1>Ticket de prueba</h1>
            //       `;
            //
            //     // Create a new HTML element to render the template
            //     const htmlElement = document.createElement('div');
            //     htmlElement.innerHTML = templateHTML;
            //
            //     // Use html2canvas to render the HTML content
            //     html2canvas(document.body).then(canvas => {
            //         const imgData = canvas.toDataURL('image/png');
            //         const pdf = new jsPDF('p', 'mm', 'a4');
            //         const imgProps = pdf.getImageProperties(imgData);
            //         const pdfWidth = pdf.internal.pageSize.getWidth();
            //         const pdfHeight = (imgProps.height * pdfWidth) / imgProps.width;
            //
            //         pdf.addImage(imgData, 'PNG', 0, 0, pdfWidth, pdfHeight);
            //         pdf.save('documento.pdf');
            //     });
            // }

            // SEGUNDA FORMA DE GENERAR PDF
            // function updateHtmlWithData(data) {
            //     $('#plan-title').text(data.planTitle);
            //     $('#retirement-age').text(`Retirement Age: ${data.retirementAge}`);
            //     $('#social-security-age').text(`Social Security Start Age: ${data.socialSecurityAge}`);
            //     $('#salary-savings').text(`Percentage of Salary You Save: ${data.salarySavings}`);
            //     $('#monthly-expenses').text(`Monthly Expenses: ${data.monthlyExpenses}`);
            //     $('#income-statement-title').text(data.incomeStatementTitle);
            //
            //     // generate table rows dynamically
            //     const tableBody = $('#table-body');
            //     tableBody.empty();
            //     data.tableData.forEach((row) => {
            //         const tableRow = `
            //               <tr>
            //                 <td>${row.income}</td>
            //                 <td>${row.expenses}</td>
            //               </tr>
            //             `;
            //         tableBody.append(tableRow);
            //     });
            // }
            //
            // function htmlToPdf(data) {
            //     updateHtmlWithData(data);
            //     var pdf = new jsPDF('p', 'pt', 'letter', 'UTF-8');
            //     source = $('#pdfThis')[0];
            //     specialElementHandlers = {
            //         '#bypassme': function(element, renderer){
            //             return true
            //         }
            //     }
            //     margins = {
            //         top: 50,
            //         left: 60,
            //         width: 545
            //     };
            //
            //     var styles = `
            //         <style>
            //           li {
            //             list-style: none;
            //           }
            //           table {
            //             background-color: #f0f0f0;
            //           }
            //         </style>
            //       `;
            //
            //     pdf.fromHTML(
            //         styles + source.outerHTML
            //         , margins.left // x coord
            //         , margins.top // y coord
            //         , {
            //             'width': margins.width // max width of content on PDF
            //             , 'elementHandlers': specialElementHandlers
            //         },
            //         function (dispose) {
            //             // dispose: object with X, Y of the last line add to the PDF
            //             //          this allow the insertion of new lines after html
            //             pdf.save('HTML2PDF_v2.pdf');
            //         }
            //     )
            // }
        </script>

    {% endblock %}
{% endblock %}
